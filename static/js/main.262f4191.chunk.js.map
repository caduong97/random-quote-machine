{"version":3,"sources":["components/SocialButton.jsx","components/NewQuoteButton.jsx","components/QuoteBox.jsx","components/Main.jsx","App.js","serviceWorker.js","index.js"],"names":["SocialButton","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","react_default","a","createElement","id","href","linkTo","target","rel","type","className","style","backgroundColor","buttonColor","socialmedia","Component","NewQuoteButton","onClick","random","QuoteBox","color","WebkitTransition","transition","randomQuote","quote","author","components_SocialButton","components_NewQuoteButton","colors","Main","ran1","Math","floor","length","setState","colorToDisplay","ran2","quotes","quoteToDisplay","console","log","bind","assertThisInitialized","_this2","axios","get","catch","error","then","res","quotesData","data","map","obj","components_QuoteBox","App","components_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.262f4191.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import {BrowserRouter as Router, Link, Switch, Route} from 'react-router-dom';\n\n\nclass SocialButton extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {  };\n    }\n    render() {\n        return (\n                <div>\n                    <a id={this.props.id} href={this.props.linkTo} target=\"_blank\" rel=\"noopener noreferrer\">\n                        <button  type=\"button\" className=\"socialButton\" style={{backgroundColor: this.props.buttonColor}}>\n                            <i className={this.props.socialmedia}></i>\n                        </button>\n                    </a>\n                </div>\n            \n        );\n    }\n}\n\nexport default SocialButton;","import React, { Component } from 'react';\n\nclass NewQuoteButton extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {  \n        };\n    }\n\n    \n        \n    render() {\n        return (\n            <div>\n                <button type=\"button\" id=\"new-quote\" className=\"newQuote\" onClick={this.props.random} style={{backgroundColor: this.props.buttonColor}}>New quote</button>\n            </div>\n        );\n    }\n}\n\nexport default NewQuoteButton;","import React, { Component } from 'react';\nimport SocialButton from './SocialButton'\nimport NewQuoteButton from './NewQuoteButton'\n\n\nclass QuoteBox extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {  };\n    }\n    render() {\n        return (\n            <div id=\"quote-box\" className=\"quoteBox\">\n                <i className=\"fa fa-quote-left\" style={{color: this.props.color, WebkitTransition: \"1.5s\", transition: \"1.5s\"}}></i>\n                <span id=\"text\" style={{color: this.props.color, WebkitTransition: \"1.5s\", transition: \"1.5s\"}}>{this.props.randomQuote.quote}</span>\n                <div id=\"author\" style={{color: this.props.color, WebkitTransition: \"1.5s\", transition: \"1.5s\"}}>- {this.props.randomQuote.author}</div>\n                <SocialButton \n                    socialmedia=\"fab fa-twitter\"\n                    buttonColor= {this.props.color}\n                    id = \"tweet-quote\"\n                    linkTo = \"https://twitter.com/intent/tweet\"\n                />\n                <SocialButton \n                    socialmedia=\"fab fa-tumblr\" \n                    buttonColor= {this.props.color}\n                    id = \"\"\n                    linkTo = \"https://www.tumblr.com\"\n                />\n                <NewQuoteButton \n                    color = {this.props.colors}\n                    buttonColor= {this.props.color}\n                    random = {this.props.random}\n                />\n            </div>\n        );\n    }\n}\n\nexport default QuoteBox;","import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport QuoteBox from './QuoteBox'\nclass Main extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {  \n\n            colors: ['#16a085', '#27ae60', '#2c3e50', '#f39c12', '#e74c3c', '#9b59b6', '#FB6964', '#342224', \"#472E32\", \"#BDBB99\", \"#77B1A9\", \"#73A857\"],\n            colorToDisplay: '',\n\n            quotes: [],\n            quoteToDisplay: {}\n            \n        };\n\n        this.random = this.random.bind(this);\n    }\n\n\n    componentDidMount() {\n        \n\n        const dataUrl = \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\";\n\n        axios.get(dataUrl)\n            .catch(error => console.log(\"BAD\", error))\n            .then(res => {\n                const quotesData = res.data.quotes.map(obj => obj);\n                this.setState({ \n                    quotes: quotesData\n                });\n\n                this.random();\n\n            });\n\n        \n\n    }\n\n\n    \n    random = () => {\n        //generate random color\n        let ran1 = Math.floor(Math.random() * this.state.colors.length)\n        \n        let color = this.state.colors[ran1];\n\n        this.setState({\n            colorToDisplay: color\n        });\n\n        //generate random quote\n        let ran2 = Math.floor(Math.random() * this.state.quotes.length)\n\n        let randomQuote = this.state.quotes[ran2];\n\n        this.setState({\n            quoteToDisplay: randomQuote\n        });\n\n        console.log(this.state.quoteToDisplay);\n   \n    }\n\n\n    render() {\n        \n        return (\n\n            <div className=\"row main\" style={{backgroundColor: this.state.colorToDisplay}}>\n                <div className='col-lg-4'></div>\n                <div className='col-lg-4'>\n                    <QuoteBox \n                        color = {this.state.colorToDisplay}\n                        random = {this.random}\n                        randomQuote = {this.state.quoteToDisplay}\n                    />\n                </div>\n            <div className='col-lg-4'></div>\n    </div>\n        );\n    }\n}\n\nexport default Main;","import React  from 'react'\nimport './style.css'\nimport Main from './components/Main'\n\nfunction App() {\n  return (\n    <div>\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}